                    <Trash size={16} className="mr-2" />
                    Delete workspace
                  </button>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
      
      {currentWorkspace.description && (
        <p className="text-gray-500 mb-8">{currentWorkspace.description}</p>
      )}
      
      <div className="mb-6">
        <h2 className="text-lg font-medium text-gray-800 mb-4">Projects</h2>
        
        {projectsLoading ? (
          <div className="flex justify-center py-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-600"></div>
          </div>
        ) : projects.length === 0 ? (
          <div className="bg-white rounded-lg shadow p-8 text-center">
            <FolderPlus size={48} className="mx-auto text-gray-400 mb-4" />
            <h3 className="text-xl font-medium text-gray-900 mb-2">No projects yet</h3>
            <p className="text-gray-500 mb-6">
              Create your first project to start organizing your tasks
            </p>
            <button
              onClick={() => setShowCreateProjectModal(true)}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              <Plus size={16} className="mr-2" />
              Create Project
            </button>
          </div>
        ) : (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {projects.map(project => (
              <ProjectCard key={project._id} project={project} />
            ))}
            
            <div 
              onClick={() => setShowCreateProjectModal(true)}
              className="bg-white rounded-lg shadow border-2 border-dashed border-gray-300 p-6 hover:border-indigo-500 hover:bg-indigo-50 transition-colors cursor-pointer flex flex-col items-center justify-center h-48"
            >
              <Plus size={24} className="text-gray-400 mb-2" />
              <p className="text-gray-500 text-center">Create new project</p>
            </div>
          </div>
        )}
      </div>
      
      {showEditModal && (
        <WorkspaceFormModal
          workspace={currentWorkspace}
          onClose={() => setShowEditModal(false)}
          onSubmit={handleEditWorkspace}
          isNew={false}
        />
      )}
      
      {showCreateProjectModal && (
        <ProjectFormModal
          onClose={() => setShowCreateProjectModal(false)}
          onSubmit={handleCreateProject}
          workspaceId={workspaceId}
        />
      )}
    </div>
  );
};

export default WorkspaceDetail;

// src/pages/project/ProjectCard.js
import React from 'react';
import { Link } from 'react-router-dom';
import { formatDistanceToNow } from 'date-fns';
import { CheckCircle, Clock, Calendar } from 'lucide-react';

const ProjectCard = ({ project }) => {
  const getStatusBadge = (status) => {
    switch (status) {
      case 'planning':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
            Planning
          </span>
        );
      case 'active':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
            Active
          </span>
        );
      case 'on-hold':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
            On Hold
          </span>
        );
      case 'completed':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
            <CheckCircle size={12} className="mr-1" />
            Completed
          </span>
        );
      case 'archived':
        return (
          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
            Archived
          </span>
        );
      default:
        return null;
    }
  };
  
  return (
    <Link 
      to={`/projects/${project._id}/board`}
      className="bg-white rounded-lg shadow hover:shadow-md transition-shadow"
    >
      <div 
        className="h-2 rounded-t-lg"
        style={{ backgroundColor: project.settings?.color || '#6366f1' }}
      ></div>
      <div className="p-6">
        <div className="flex justify-between items-start mb-3">
          <h3 className="text-lg font-medium text-gray-900">{project.name}</h3>
          {getStatusBadge(project.status)}
        </div>
        
        {project.description && (
          <p className="text-gray-500 text-sm mb-4 line-clamp-2">{project.description}</p>
        )}
        
        <div className="flex flex-col space-y-2 text-gray-500 text-sm">
          {project.dueDate && (
            <div className="flex items-center">
              <Calendar size={16} className="mr-2" />
              <span>Due {formatDistanceToNow(new Date(project.dueDate), { addSuffix: true })}</span>
            </div>
          )}
          
          <div className="flex items-center">
            <Clock size={16} className="mr-2" />
            <span>Updated {formatDistanceToNow(new Date(project.updatedAt), { addSuffix: true })}</span>
          </div>
        </div>
      </div>
    </Link>
  );
};

export default ProjectCard;

// src/pages/project/ProjectFormModal.js
import React, { useState, useEffect } from 'react';
import { X } from 'lucide-react';
import { CirclePicker } from 'react-color';

const ProjectFormModal = ({ project, onClose, onSubmit, workspaceId }) => {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    status: 'planning',
    startDate: '',
    dueDate: '',
    settings: {
      color: '#6366f1',
      icon: 'clipboard'
    }
  });
  
  useEffect(() => {
    if (project) {
      setFormData({
        name: project.name || '',
        description: project.description || '',
        status: project.status || 'planning',
        startDate: project.startDate ? new Date(project.startDate).toISOString().split('T')[0] : '',
        dueDate: project.dueDate ? new Date(project.dueDate).toISOString().split('T')[0] : '',
        settings: {
          color: project.settings?.color || '#6366f1',
          icon: project.settings?.icon || 'clipboard'
        }
      });
    }
  }, [project]);
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleColorChange = (color) => {
    setFormData(prev => ({
      ...prev,
      settings: {
        ...prev.settings,
        color: color.hex
      }
    }));
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    
    const projectData = {
      ...formData,
      workspaceId
    };
    
    onSubmit(projectData);
  };
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-md overflow-hidden">
        <div className="p-4 border-b border-gray-200 flex items-center justify-between">
          <h3 className="text-lg font-semibold">
            {project ? 'Edit Project' : 'Create Project'}
          </h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-500"
          >
            <X size={20} />
          </button>
        </div>
        
        <form onSubmit={handleSubmit} className="p-4">
          <div className="space-y-4">
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                Project Name
              </label>
              <input
                type="text"
                id="name"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                placeholder="My Project"
                required
              />
            </div>
            
            <div>
              <label htmlFor="description" className="block text-sm font-medium text-gray-700">
                Description
              </label>
              <textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleChange}
                rows={3}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                placeholder="A brief description of your project"
              />
            </div>
            
            <div>
              <label htmlFor="status" className="block text-sm font-medium text-gray-700">
                Status
              </label>
              <select
                id="status"
                name="status"
                value={formData.status}
                onChange={handleChange}
                className="mt-1 block w-full bg-white border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              >
                <option value="planning">Planning</option>
                <option value="active">Active</option>
                <option value="on-hold">On Hold</option>
                <option value="completed">Completed</option>
                <option value="archived">Archived</option>
              </select>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label htmlFor="startDate" className="block text-sm font-medium text-gray-700">
                  Start Date
                </label>
                <input
                  type="date"
                  id="startDate"
                  name="startDate"
                  value={formData.startDate}
                  onChange={handleChange}
                  className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                />
              </div>
              
              <div>
                <label htmlFor="dueDate" className="block text-sm font-medium text-gray-700">
                  Due Date
                </label>
                <input
                  type="date"
                  id="dueDate"
                  name="dueDate"
                  value={formData.dueDate}
                  onChange={handleChange}
                  className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                />
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Project Color
              </label>
              <CirclePicker
                color={formData.settings.color}
                onChange={handleColorChange}
                colors={[
                  '#F44336', '#E91E63', '#9C27B0', '#673AB7', '#3F51B5',
                  '#2196F3', '#03A9F4', '#00BCD4', '#009688', '#4CAF50',
                  '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800',
                  '#FF5722', '#795548', '#607D8B'
                ]}
              />
            </div>
          </div>
          
          <div className="mt-6 flex justify-end space-x-3">
            <button
              type="button"
              onClick={onClose}
              className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              {project ? 'Save' : 'Create'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default ProjectFormModal;

// src/pages/Dashboard.js
import React, { useEffect } from 'react';
import { Link } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { getWorkspaces } from '../store/actions/workspaceActions';
import { getTasks } from '../store/actions/taskActions';
import { getNotifications } from '../store/actions/notificationActions';
import { 
  Clock, 
  CheckCircle, 
  AlertTriangle,
  ArrowRight,
  Calendar,
  ChevronRight
} from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';
import Spinner from '../components/layout/Spinner';

const Dashboard = () => {
  const dispatch = useDispatch();
  
  const { user } = useSelector(state => state.auth);
  const { workspaces, loading: workspacesLoading } = useSelector(state => state.workspace);
  const { tasks, loading: tasksLoading } = useSelector(state => state.task);
  const { notifications, loading: notificationsLoading } = useSelector(state => state.notification);
  
  useEffect(() => {
    dispatch(getWorkspaces());
    dispatch(getNotifications());
    
    // Get tasks for all projects the user is part of
    // Note: In a real app, we would have an API endpoint to get all tasks across projects
    // Here we're simulating it for demonstration
    if (workspaces && workspaces.length > 0) {
      const projectIds = workspaces.flatMap(workspace => 
        workspace.projects?.map(project => project._id) || []
      );
      
      projectIds.forEach(projectId => {
        dispatch(getTasks(projectId));
      });
    }
  }, [dispatch, workspaces]);
  
  // Filter overdue tasks
  const overdueTasks = tasks.filter(task => {
    if (!task.dueDate) return false;
    const dueDate = new Date(task.dueDate);
    const today = new Date();
    return dueDate < today && task.status !== 'Done';
  });
  
  // Filter tasks due soon (within 3 days)
  const tasksDueSoon = tasks.filter(task => {
    if (!task.dueDate) return false;
    const dueDate = new Date(task.dueDate);
    const today = new Date();
    const threeDaysFromNow = new Date();
    threeDaysFromNow.setDate(today.getDate() + 3);
    return dueDate >= today && dueDate <= threeDaysFromNow && task.status !== 'Done';
  });
  
  // Get recently completed tasks
  const recentlyCompletedTasks = tasks.filter(task => {
    if (!task.completedAt) return false;
    const completedDate = new Date(task.completedAt);
    const sevenDaysAgo = new Date();
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
    return completedDate >= sevenDaysAgo && task.status === 'Done';
  }).sort((a, b) => new Date(b.completedAt) - new Date(a.completedAt));
  
  // Get unread notifications
  const unreadNotifications = notifications.filter(notification => !notification.read);
  
  if (workspacesLoading || tasksLoading || notificationsLoading) {
    return <Spinner />;
  }
  
  return (
    <div className="p-6">
      <h1 className="text-2xl font-semibold text-gray-800 mb-6">Dashboard</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        {/* Overdue Tasks */}
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-medium text-gray-800">Overdue Tasks</h2>
            <div className="bg-red-100 text-red-600 p-2 rounded-full">
              <AlertTriangle size={20} />
            </div>
          </div>
          
          {overdueTasks.length === 0 ? (
            <p className="text-gray-500">No overdue tasks. Great job!</p>
          ) : (
            <div className="space-y-3">
              {overdueTasks.slice(0, 5).map(task => (
                <Link 
                  key={task._id}
                  to={`/tasks/${task._id}`}
                  className="block p-3 hover:bg-gray-50 rounded-md"
                >
                  <div className="flex justify-between">
                    <span className="font-medium text-gray-800">{task.title}</span>
                    <span className="text-red-600 text-sm">
                      {formatDistanceToNow(new Date(task.dueDate), { addSuffix: true })}
                    </span>
                  </div>
                  <div className="text-sm text-gray-500 mt-1">
                    Project: {task.projectName || 'Unknown project'}
                  </div>
                </Link>
              ))}
              
              {overdueTasks.length > 5 && (
                <Link 
                  to="/tasks"
                  className="flex items-center justify-center mt-2 text-indigo-600 hover:text-indigo-800"
                >
                  View all {overdueTasks.length} overdue tasks
                  <ChevronRight size={16} className="ml-1" />
                </Link>
              )}
            </div>
          )}
        </div>
        
        {/* Tasks Due Soon */}
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-medium text-gray-800">Due Soon</h2>
            <div className="bg-yellow-100 text-yellow-600 p-2 rounded-full">
              <Clock size={20} />
            </div>
          </div>
          
          {tasksDueSoon.length === 0 ? (
            <p className="text-gray-500">No tasks due soon.</p>
          ) : (
            <div className="space-y-3">
              {tasksDueSoon.slice(0, 5).map(task => (
                <Link 
                  key={task._id}
                  to={`/tasks/${task._id}`}
                  className="block p-3 hover:bg-gray-50 rounded-md"
                >
                  <div className="flex justify-between">
                    <span className="font-medium text-gray-800">{task.title}</span>
                    <span className="text-yellow-600 text-sm">
                      {formatDistanceToNow(new Date(task.dueDate), { addSuffix: true })}
                    </span>
                  </div>
                  <div className="text-sm text-gray-500 mt-1">
                    Project: {task.projectName || 'Unknown project'}
                  </div>
                </Link>
              ))}
              
              {tasksDueSoon.length > 5 && (
                <Link 
                  to="/tasks"
                  className="flex items-center justify-center mt-2 text-indigo-600 hover:text-indigo-800"
                >
                  View all {tasksDueSoon.length} upcoming tasks
                  <ChevronRight size={16} className="ml-1" />
                </Link>
              )}
            </div>
          )}
        </div>
        
        {/* Recently Completed */}
        <div className="bg-white rounded-lg shadow p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-medium text-gray-800">Recently Completed</h2>
            <div className="bg-green-100 text-green-600 p-2 rounded-full">
              <CheckCircle size={20} />
            </div>
          </div>
          
          {recentlyCompletedTasks.length === 0 ? (
            <p className="text-gray-500">No recently completed tasks.</p>
          ) : (
            <div className="space-y-3">
              {recentlyCompletedTasks.slice(0, 5).map(task => (
                <Link 
                  key={task._id}
                  to={`/tasks/${task._id}`}
                  className="block p-3 hover:bg-gray-50 rounded-md"
                >
                  <div className="flex justify-between">
                    <span className="font-medium text-gray-800">{task.title}</span>
                    <span className="text-green-600 text-sm">
                      {task.completedAt && formatDistanceToNow(new Date(task.completedAt), { addSuffix: true })}
                    </span>
                  </div>
                  <div className="text-sm text-gray-500 mt-1">
                    Project: {task.projectName || 'Unknown project'}
                  </div>
                </Link>
              ))}
            </div>
          )}
        </div>
      </div>
      
      {/* Recent Workspaces */}
      <h2 className="text-lg font-medium text-gray-800 mb-4">Your Workspaces</h2>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
        {workspaces.slice(0, 3).map(workspace => (
          <Link 
            key={workspace._id}
            to={`/workspaces/${workspace._id}`}
            className="bg-white rounded-lg shadow p-6 hover:shadow-md transition-shadow"
          >
            <div className="flex items-center mb-3">
              <div
                className="w-4 h-4 rounded-full mr-3"
                style={{ backgroundColor: workspace.settings?.color || '#6366f1' }}
              ></div>
              <h3 className="text-lg font-medium text-gray-900">{workspace.name}</h3>
            </div>
            {workspace.description && (
              <p className="text-gray-500 mb-4 line-clamp-2">{workspace.description}</p>
            )}
            <div className="flex justify-between items-center">
              <span className="text-sm text-gray-500">
                {workspace.projects?.length || 0} projects
              </span>
              <ArrowRight size={16} className="text-indigo-600" />
            </div>
          </Link>
        ))}
        
        {workspaces.length > 3 && (
          <Link 
            to="/workspaces"
            className="bg-white rounded-lg shadow p-6 flex flex-col items-center justify-center text-indigo-600 hover:bg-indigo-50 hover:text-indigo-800 transition-colors"
          >
            <span className="font-medium">View All Workspaces</span>
            <span className="text-sm mt-1">{workspaces.length} total</span>
          </Link>
        )}
      </div>
      
      {/* Calendar / Upcoming */}
      <div className="bg-white rounded-lg shadow p-6 mb-8">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-medium text-gray-800">Upcoming Deadlines</h2>
          <div className="bg-indigo-100 text-indigo-600 p-2 rounded-full">
            <Calendar size={20} />
          </div>
        </div>
        
        <div className="overflow-hidden">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Task</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Project</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Due Date</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {[...overdueTasks, ...tasksDueSoon]
                .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate))
                .slice(0, 5)
                .map(task => (
                  <tr key={task._id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <Link to={`/tasks/${task._id}`} className="text-indigo-600 hover:text-indigo-900">
                        {task.title}
                      </Link>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {task.projectName || 'Unknown project'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        task.status === 'Done' ? 'bg-green-100 text-green-800' :
                        task.status === 'In Progress' ? 'bg-blue-100 text-blue-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {task.status}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {new Date(task.dueDate) < new Date() ? (
                        <span className="text-red-600">
                          {formatDistanceToNow(new Date(task.dueDate), { addSuffix: true })}
                        </span>
                      ) : (
                        formatDistanceToNow(new Date(task.dueDate), { addSuffix: true })
                      )}
                    </td>
                  </tr>
                ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;// src/pages/project/ProjectSettingsModal.js
import React, { useState, useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { CirclePicker } from 'react-color';
import { X, Plus, Trash } from 'lucide-react';
import { updateProject } from '../../store/actions/projectActions';

const ProjectSettingsModal = ({ project, onClose }) => {
  const dispatch = useDispatch();
  
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    status: '',
    settings: {
      color: '',
      icon: '',
      taskViews: {
        board: {
          enabled: true,
          columns: []
        },
        list: {
          enabled: true
        },
        calendar: {
          enabled: true
        }
      }
    }
  });
  
  useEffect(() => {
    if (project) {
      setFormData({
        name: project.name || '',
        description: project.description || '',
        status: project.status || 'active',
        settings: {
          color: project.settings?.color || '#6366f1',
          icon: project.settings?.icon || 'clipboard',
          taskViews: {
            board: {
              enabled: project.settings?.taskViews?.board?.enabled !== false,
              columns: project.settings?.taskViews?.board?.columns || [
                { name: 'To Do', color: '#f3f4f6' },
                { name: 'In Progress', color: '#dbeafe' },
                { name: 'Review', color: '#fef3c7' },
                { name: 'Done', color: '#d1fae5' }
              ]
            },
            list: {
              enabled: project.settings?.taskViews?.list?.enabled !== false
            },
            calendar: {
              enabled: project.settings?.taskViews?.calendar?.enabled !== false
            }
          }
        }
      });
    }
  }, [project]);
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleViewToggle = (view) => {
    setFormData(prev => ({
      ...prev,
      settings: {
        ...prev.settings,
        taskViews: {
          ...prev.settings.taskViews,
          [view]: {
            ...prev.settings.taskViews[view],
            enabled: !prev.settings.taskViews[view].enabled
          }
        }
      }
    }));
  };
  
  const handleColorChange = (color) => {
    setFormData(prev => ({
      ...prev,
      settings: {
        ...prev.settings,
        color: color.hex
      }
    }));
  };
  
  const handleColumnChange = (index, field, value) => {
    const updatedColumns = [...formData.settings.taskViews.board.columns];
    updatedColumns[index] = {
      ...updatedColumns[index],
      [field]: value
    };
    
    setFormData(prev => ({
      ...prev,
      settings: {
        ...prev.settings,
        taskViews: {
          ...prev.settings.taskViews,
          board: {
            ...prev.settings.taskViews.board,
            columns: updatedColumns
          }
        }
      }
    }));
  };
  
  const handleAddColumn = () => {
    setFormData(prev => ({
      ...prev,
      settings: {
        ...prev.settings,
        taskViews: {
          ...prev.settings.taskViews,
          board: {
            ...prev.settings.taskViews.board,
            columns: [
              ...prev.settings.taskViews.board.columns,
              { name: '', color: '#f3f4f6' }
            ]
          }
        }
      }
    }));
  };
  
  const handleRemoveColumn = (index) => {
    const updatedColumns = [...formData.settings.taskViews.board.columns];
    updatedColumns.splice(index, 1);
    
    setFormData(prev => ({
      ...prev,
      settings: {
        ...prev.settings,
        taskViews: {
          ...prev.settings.taskViews,
          board: {
            ...prev.settings.taskViews.board,
            columns: updatedColumns
          }
        }
      }
    }));
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    dispatch(updateProject(project._id, formData));
    onClose();
  };
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-hidden flex flex-col">
        <div className="p-4 border-b border-gray-200 flex items-center justify-between">
          <h3 className="text-lg font-semibold">Project Settings</h3>
          <button 
            onClick={onClose}
            className="text-gray-400 hover:text-gray-500"
          >
            <X size={20} />
          </button>
        </div>
        
        <form onSubmit={handleSubmit} className="flex-1 overflow-auto p-4">
          <div className="space-y-6">
            <div>
              <h4 className="text-md font-medium mb-4">General Settings</h4>
              <div className="space-y-4">
                <div>
                  <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                    Project Name
                  </label>
                  <input
                    type="text"
                    id="name"
                    name="name"
                    value={formData.name}
                    onChange={handleChange}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                    required
                  />
                </div>
                
                <div>
                  <label htmlFor="description" className="block text-sm font-medium text-gray-700">
                    Description
                  </label>
                  <textarea
                    id="description"
                    name="description"
                    value={formData.description}
                    onChange={handleChange}
                    rows={3}
                    className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                  />
                </div>
                
                <div>
                  <label htmlFor="status" className="block text-sm font-medium text-gray-700">
                    Status
                  </label>
                  <select
                    id="status"
                    name="status"
                    value={formData.status}
                    onChange={handleChange}
                    className="mt-1 block w-full bg-white border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                  >
                    <option value="planning">Planning</option>
                    <option value="active">Active</option>
                    <option value="on-hold">On Hold</option>
                    <option value="completed">Completed</option>
                    <option value="archived">Archived</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Project Color
                  </label>
                  <CirclePicker
                    color={formData.settings.color}
                    onChange={handleColorChange}
                    colors={[
                      '#F44336', '#E91E63', '#9C27B0', '#673AB7', '#3F51B5',
                      '#2196F3', '#03A9F4', '#00BCD4', '#009688', '#4CAF50',
                      '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800',
                      '#FF5722', '#795548', '#607D8B'
                    ]}
                  />
                </div>
              </div>
            </div>
            
            <div>
              <h4 className="text-md font-medium mb-4">View Settings</h4>
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={formData.settings.taskViews.board.enabled}
                      onChange={() => handleViewToggle('board')}
                      className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                    />
                    <span className="ml-2 text-sm text-gray-700">Board View</span>
                  </label>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={formData.settings.taskViews.list.enabled}
                      onChange={() => handleViewToggle('list')}
                      className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                    />
                    <span className="ml-2 text-sm text-gray-700">List View</span>
                  </label>
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={formData.settings.taskViews.calendar.enabled}
                      onChange={() => handleViewToggle('calendar')}
                      className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                    />
                    <span className="ml-2 text-sm text-gray-700">Calendar View</span>
                  </label>
                </div>
              </div>
            </div>
            
            <div>
              <h4 className="text-md font-medium mb-4">Board Columns</h4>
              <div className="space-y-3">
                {formData.settings.taskViews.board.columns.map((column, index) => (
                  <div key={index} className="flex items-center space-x-3">
                    <input
                      type="text"
                      value={column.name}
                      onChange={(e) => handleColumnChange(index, 'name', e.target.value)}
                      className="flex-1 border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                      placeholder="Column name"
                      required
                    />
                    <div
                      className="w-6 h-6 rounded-full cursor-pointer border border-gray-300"
                      style={{ backgroundColor: column.color }}
                      onClick={() => {
                        // Simple color picker - cycles through predefined colors
                        const colors = [
                          '#f3f4f6', '#dbeafe', '#fef3c7', '#d1fae5',
                          '#fee2e2', '#fce7f3', '#ede9fe', '#e0e7ff'
                        ];
                        const currentIndex = colors.indexOf(column.color);
                        const nextIndex = (currentIndex + 1) % colors.length;
                        handleColumnChange(index, 'color', colors[nextIndex]);
                      }}
                    />
                    <button
                      type="button"
                      onClick={() => handleRemoveColumn(index)}
                      className="text-red-500 hover:text-red-700"
                      disabled={formData.settings.taskViews.board.columns.length <= 1}
                    >
                      <Trash size={16} />
                    </button>
                  </div>
                ))}
                
                <button
                  type="button"
                  onClick={handleAddColumn}
                  className="flex items-center text-indigo-600 hover:text-indigo-800"
                >
                  <Plus size={16} className="mr-1" />
                  Add Column
                </button>
              </div>
            </div>
          </div>
        </form>
        
        <div className="p-4 border-t border-gray-200 flex justify-end">
          <div className="flex space-x-2">
            <button
              type="button"
              onClick={onClose}
              className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Cancel
            </button>
            
            <button
              type="submit"
              onClick={handleSubmit}
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Save Changes
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProjectSettingsModal;

// src/pages/workspace/WorkspaceList.js
import React, { useEffect, useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { getWorkspaces, createWorkspace } from '../../store/actions/workspaceActions';
import { Plus, FolderPlus, MoreHorizontal } from 'lucide-react';
import WorkspaceCard from './WorkspaceCard';
import WorkspaceFormModal from './WorkspaceFormModal';
import Spinner from '../../components/layout/Spinner';

const WorkspaceList = () => {
  const dispatch = useDispatch();
  const navigate = useNavigate();
  
  const { workspaces, loading } = useSelector(state => state.workspace);
  
  const [showCreateModal, setShowCreateModal] = useState(false);
  
  useEffect(() => {
    dispatch(getWorkspaces());
  }, [dispatch]);
  
  const handleCreateWorkspace = async (workspaceData) => {
    const result = await dispatch(createWorkspace(workspaceData));
    if (result) {
      setShowCreateModal(false);
      navigate(`/workspaces/${result._id}`);
    }
  };
  
  if (loading) {
    return <Spinner />;
  }
  
  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-semibold text-gray-800">Workspaces</h1>
        <button
          onClick={() => setShowCreateModal(true)}
          className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          <Plus size={16} className="mr-2" />
          New Workspace
        </button>
      </div>
      
      {workspaces.length === 0 ? (
        <div className="bg-white rounded-lg shadow p-8 text-center">
          <FolderPlus size={48} className="mx-auto text-gray-400 mb-4" />
          <h2 className="text-xl font-medium text-gray-900 mb-2">No workspaces yet</h2>
          <p className="text-gray-500 mb-6">
            Create your first workspace to start organizing your projects
          </p>
          <button
            onClick={() => setShowCreateModal(true)}
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            <Plus size={16} className="mr-2" />
            Create Workspace
          </button>
        </div>
      ) : (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {workspaces.map(workspace => (
            <WorkspaceCard key={workspace._id} workspace={workspace} />
          ))}
          
          <div 
            onClick={() => setShowCreateModal(true)}
            className="bg-white rounded-lg shadow border-2 border-dashed border-gray-300 p-6 hover:border-indigo-500 hover:bg-indigo-50 transition-colors cursor-pointer flex flex-col items-center justify-center h-64"
          >
            <Plus size={24} className="text-gray-400 mb-2" />
            <p className="text-gray-500 text-center">Create new workspace</p>
          </div>
        </div>
      )}
      
      {showCreateModal && (
        <WorkspaceFormModal
          onClose={() => setShowCreateModal(false)}
          onSubmit={handleCreateWorkspace}
          isNew={true}
        />
      )}
    </div>
  );
};

export default WorkspaceList;

// src/pages/workspace/WorkspaceCard.js
import React from 'react';
import { Link } from 'react-router-dom';
import { Users } from 'lucide-react';

const WorkspaceCard = ({ workspace }) => {
  const memberCount = workspace.members ? workspace.members.length : 0;
  
  return (
    <Link 
      to={`/workspaces/${workspace._id}`}
      className="bg-white rounded-lg shadow hover:shadow-md transition-shadow"
    >
      <div 
        className="h-2 rounded-t-lg"
        style={{ backgroundColor: workspace.settings?.color || '#6366f1' }}
      ></div>
      <div className="p-6">
        <h3 className="text-lg font-medium text-gray-900 mb-2">{workspace.name}</h3>
        {workspace.description && (
          <p className="text-gray-500 text-sm mb-4 line-clamp-2">{workspace.description}</p>
        )}
        <div className="flex items-center text-gray-400 text-sm">
          <Users size={16} className="mr-1" />
          <span>{memberCount} {memberCount === 1 ? 'member' : 'members'}</span>
        </div>
      </div>
    </Link>
  );
};

export default WorkspaceCard;

// src/pages/workspace/WorkspaceFormModal.js
import React, { useState, useEffect } from 'react';
import { X } from 'lucide-react';
import { CirclePicker } from 'react-color';

const WorkspaceFormModal = ({ workspace, onClose, onSubmit, isNew = false }) => {
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    settings: {
      color: '#6366f1',
      isPrivate: false
    }
  });
  
  useEffect(() => {
    if (workspace && !isNew) {
      setFormData({
        name: workspace.name || '',
        description: workspace.description || '',
        settings: {
          color: workspace.settings?.color || '#6366f1',
          isPrivate: workspace.settings?.isPrivate || false
        }
      });
    }
  }, [workspace, isNew]);
  
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    
    if (name === 'isPrivate') {
      setFormData(prev => ({
        ...prev,
        settings: {
          ...prev.settings,
          isPrivate: checked
        }
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };
  
  const handleColorChange = (color) => {
    setFormData(prev => ({
      ...prev,
      settings: {
        ...prev.settings,
        color: color.hex
      }
    }));
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(formData);
  };
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-md overflow-hidden">
        <div className="p-4 border-b border-gray-200 flex items-center justify-between">
          <h3 className="text-lg font-semibold">
            {isNew ? 'Create Workspace' : 'Edit Workspace'}
          </h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-500"
          >
            <X size={20} />
          </button>
        </div>
        
        <form onSubmit={handleSubmit} className="p-4">
          <div className="space-y-4">
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                Workspace Name
              </label>
              <input
                type="text"
                id="name"
                name="name"
                value={formData.name}
                onChange={handleChange}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                placeholder="My Workspace"
                required
              />
            </div>
            
            <div>
              <label htmlFor="description" className="block text-sm font-medium text-gray-700">
                Description
              </label>
              <textarea
                id="description"
                name="description"
                value={formData.description}
                onChange={handleChange}
                rows={3}
                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                placeholder="A brief description of your workspace"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Workspace Color
              </label>
              <CirclePicker
                color={formData.settings.color}
                onChange={handleColorChange}
                colors={[
                  '#F44336', '#E91E63', '#9C27B0', '#673AB7', '#3F51B5',
                  '#2196F3', '#03A9F4', '#00BCD4', '#009688', '#4CAF50',
                  '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800',
                  '#FF5722', '#795548', '#607D8B'
                ]}
              />
            </div>
            
            <div className="flex items-center">
              <input
                id="isPrivate"
                name="isPrivate"
                type="checkbox"
                checked={formData.settings.isPrivate}
                onChange={handleChange}
                className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label htmlFor="isPrivate" className="ml-2 block text-sm text-gray-700">
                Private workspace (only visible to members)
              </label>
            </div>
          </div>
          
          <div className="mt-6 flex justify-end space-x-3">
            <button
              type="button"
              onClick={onClose}
              className="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Cancel
            </button>
            <button
              type="submit"
              className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              {isNew ? 'Create' : 'Save'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default WorkspaceFormModal;

// src/pages/workspace/WorkspaceDetail.js
import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { 
  getWorkspaceById, 
  updateWorkspace, 
  deleteWorkspace 
} from '../../store/actions/workspaceActions';
import { getProjects, createProject } from '../../store/actions/projectActions';
import { 
  Plus, 
  Edit, 
  Trash, 
  Settings, 
  FolderPlus, 
  FolderOpen,
  MoreHorizontal 
} from 'lucide-react';
import WorkspaceFormModal from './WorkspaceFormModal';
import ProjectCard from '../project/ProjectCard';
import ProjectFormModal from '../project/ProjectFormModal';
import Spinner from '../../components/layout/Spinner';

const WorkspaceDetail = () => {
  const { workspaceId } = useParams();
  const navigate = useNavigate();
  const dispatch = useDispatch();
  
  const { currentWorkspace, loading: workspaceLoading } = useSelector(state => state.workspace);
  const { projects, loading: projectsLoading } = useSelector(state => state.project);
  const { user } = useSelector(state => state.auth);
  
  const [showMenu, setShowMenu] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showCreateProjectModal, setShowCreateProjectModal] = useState(false);
  
  useEffect(() => {
    dispatch(getWorkspaceById(workspaceId));
    dispatch(getProjects(workspaceId));
  }, [dispatch, workspaceId]);
  
  const isOwner = currentWorkspace?.owner === user?._id;
  
  const handleEditWorkspace = async (workspaceData) => {
    await dispatch(updateWorkspace(workspaceId, workspaceData));
    setShowEditModal(false);
  };
  
  const handleDeleteWorkspace = () => {
    if (window.confirm('Are you sure you want to delete this workspace? This action cannot be undone.')) {
      dispatch(deleteWorkspace(workspaceId));
      navigate('/workspaces');
    }
  };
  
  const handleCreateProject = async (projectData) => {
    const result = await dispatch(createProject(workspaceId, projectData));
    if (result) {
      setShowCreateProjectModal(false);
      navigate(`/projects/${result._id}/board`);
    }
  };
  
  if (workspaceLoading) {
    return <Spinner />;
  }
  
  if (!currentWorkspace) {
    return (
      <div className="p-8 text-center">
        <h2 className="text-2xl font-semibold text-gray-800 mb-4">Workspace not found</h2>
        <button
          onClick={() => navigate('/workspaces')}
          className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Go to Workspaces
        </button>
      </div>
    );
  }
  
  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-6">
        <div className="flex items-center">
          <div 
            className="w-8 h-8 rounded-md mr-3"
            style={{ backgroundColor: currentWorkspace.settings?.color || '#6366f1' }}
          ></div>
          <h1 className="text-2xl font-semibold text-gray-800">{currentWorkspace.name}</h1>
        </div>
        
        <div className="flex items-center space-x-2">
          <button
            onClick={() => setShowCreateProjectModal(true)}
            className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            <Plus size={16} className="mr-2" />
            New Project
          </button>
          
          <div className="relative">
            <button
              onClick={() => setShowMenu(!showMenu)}
              className="inline-flex items-center p-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              <MoreHorizontal size={16} />
            </button>
            
            {showMenu && (
              <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg overflow-hidden z-30">
                <button
                  onClick={() => {
                    setShowEditModal(true);
                    setShowMenu(false);
                  }}
                  className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                >
                  <Edit size={16} className="mr-2" />
                  Edit workspace
                </button>
                
                {isOwner && (
                  <button
                    onClick={() => {
                      handleDeleteWorkspace();
                      setShowMenu(false);
                    }}
                    className="flex items-center w-full px-4 py-2 text-sm text-red-600 hover:bg-gray-100"
                  >
                    <Trash size={16} className="mr-2" />
                    Delete workspace
                  </button>// src/pages/project/ProjectSettingsModal.js
import React, { useState, useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { CirclePicker } from 'react-color';
import { X, Plus, Trash } from 'lucide-react';
import { updateProject } from '../../store/actions/projectActions';

const ProjectSettingsModal = ({ project, onClose }) => {
  const dispatch = useDispatch();
  
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    status: '',
    settings: {
      color: '',
      icon: '',
      taskViews: {
        board: {
          enabled: true,
          columns: []
        },
        list: {
          enabled: true
        },
        calendar: {
          enabled: true
        }
      }
    }
  });
  
  useEffect(() => {
    if (project) {
      setFormData({
        name: project.name || '',
        description: project.description || '',
        status: project.status || 'active',
        settings: {
          color: project.settings?.color || '#6366f1',
          icon: project.settings?.icon || 'clipboard',
          taskViews: {
            board: {
              enabled: project.settings?.taskViews?.board?.enabled !== false,
              columns: project.settings?.taskViews?.board?.columns || [
                { name: 'To Do', color: '#f3f4f6' },
                { name: 'In Progress', color: '#dbeafe' },
                { name: 'Review', color: '#fef3c7' },
                { name: 'Done', color: '#d1fae5' }
              ]
            },
            list: {
              enabled: project.settings?.taskViews?.list?.enabled !== false
            },
            calendar: {
              enabled: project.settings?.taskViews?.calendar?.enabled !== false
            }
          }
        }
      });
    }
  }, [project]);
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleViewToggle = (view) => {
    setFormData(prev => ({
      ...prev,
      settings: {
        ...prev.settings,
        taskViews: {
          ...prev.settings.taskViews,
          [view]: {
            ...prev.settings.taskViews[view],
            enabled: !prev.settings.taskViews[view].enabled
          }
        }
      }
    }));
  };
  
  const handleColorChange = (color) => {
    setFormData(prev => ({
      ...prev,
      settings: {
        ...prev.settings,
        color: color.hex
      }
    }));
  };
  
  const handleColumnChange = (index, field, value) => {
    const updatedColumns = [...formData.settings.taskViews.board.columns];
    updatedColumns[index] = {
      ...updatedColumns[index],
      [field]: value
    };
    
    setFormData(prev => ({
      ...prev,
      settings: {
        ...prev.settings,
        taskViews: {
          ...prev.settings.taskViews,
          board: {
            ...prev.settings.taskViews.board,
            columns: updatedColumns
          }
        }
      }
    }));
  };
  
  const handleAddColumn = () => {
    setFormData(prev => ({
      ...prev,
      settings: {
        ...prev.settings,
        taskViews: {
          ...prev.settings.taskViews,
          board: {
            ...prev.settings.taskViews.board,
            columns: [
              ...prev.settings.taskViews.board.columns,
              { name: '', color: '#f3f4f6' }
            ]
          }
        }
      }
    }));
  };
  
  const handleRemoveColumn = (index) => {
    const updatedColumns = [...formData.settings.taskViews.board.columns];
    updatedColumns.splice(index, 1);
    
    setFormData(prev => ({
      ...prev,
      settings: {
        ...prev.settings,
        taskViews: {
          ...prev.settings.taskViews,
          board: {
            ...prev.settings.taskViews.board,
            columns: updatedColumns
          }
        }
      }
    }));
  };
  
  const handleSubmit = (e) => {
    e.preventDefault();
    dispatch(updateProject(project._id, formData));
    onClose();
  };
  
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-hidden flex flex-col">
        <div className="p-4 border